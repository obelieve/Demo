apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion //编译版本 可以使用对应API版本开发
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {//覆盖 AndroidManifest.xml对应条目
        applicationId "com.zxy.demo"
        minSdkVersion rootProject.ext.android.minSdkVersion //APP 最小使用版本
        targetSdkVersion rootProject.ext.android.targetSdkVersion //APP 告诉操作系统向前兼容API版本的方式
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        viewBinding =true
    }

    buildTypes {
        debug{
            buildConfigField "String","API_URL","\"https://www.github.com\""
          //  resValue "string", "AppType", "Debug"
        }
        release {
            //resValue "string", "AppType", "Release"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    flavorDimensions "color","price"

    productFlavors {
        blue{
            resValue "string", "AppType", "Blue"
            flavorDimensions "color"
        }
        yellow{
            resValue "string", "AppType", "Yellow"
            flavorDimensions "color"
        }
        red{
            resValue "string", "AppType", "Red"
            flavorDimensions "price"
        }
        gray{
            resValue "string", "AppType", "Gray"
            flavorDimensions "price"
        }

        android.variantFilter { variant ->
            if (variant.buildType.name.equals('release')) {
                variant.getFlavors().each() { flavor ->
                    if (flavor.name.equals('blue')) {
                        variant.setIgnore(true);
                    }
                }
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.2"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.2"
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation fileTree(dir: 'libs', include: ['*.jar']) //依赖libs文件夹下，所有的*.jar文件
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.github.obelieve:Frame:1.0.0'



}

class A{
   private def a = "A变量a"

    void aa(String arg){
        println a
        println "aa() $arg"
    }
}

class B{

    String bb(String arg){
        println "执行 B类中的bb方法=$arg"
    }
}
class C{
    def v={
        bb("C类-闭包调用bb()")
    }

    void bb(String arg){
        println "执行 C类中的bb方法=$arg"
    }

    static String run(Closure closure, Object delegate){
        Closure c = (Closure) closure.clone()
        c.delegate = delegate
        c.call()
    }
}
task a{
    new A().aa("^^")
    //设置代理策略优先delegate
    Closure closure = new C().v
    closure.setResolveStrategy(Closure.DELEGATE_FIRST)
    C.run(closure,new B())
}
